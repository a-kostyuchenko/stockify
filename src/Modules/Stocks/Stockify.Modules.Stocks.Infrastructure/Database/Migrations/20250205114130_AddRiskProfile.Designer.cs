// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Stockify.Modules.Stocks.Infrastructure.Database;

#nullable disable

namespace Stockify.Modules.Stocks.Infrastructure.Database.Migrations
{
    [DbContext(typeof(StocksDbContext))]
    [Migration("20250205114130_AddRiskProfile")]
    partial class AddRiskProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("stocks")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Stockify.Common.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.HasIndex("OccurredOnUtc", "ProcessedOnUtc")
                        .HasDatabaseName("ix_inbox_messages_occurred_on_utc_processed_on_utc")
                        .HasFilter("processed_on_utc IS NULL");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("OccurredOnUtc", "ProcessedOnUtc"), new[] { "Id", "Type", "Content" });

                    b.ToTable("inbox_messages", "stocks");
                });

            modelBuilder.Entity("Stockify.Common.Infrastructure.Inbox.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("InboxMessageId", "Name")
                        .HasName("pk_inbox_message_consumers");

                    b.ToTable("inbox_message_consumers", "stocks");
                });

            modelBuilder.Entity("Stockify.Common.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.HasIndex("OccurredOnUtc", "ProcessedOnUtc")
                        .HasDatabaseName("ix_outbox_messages_occurred_on_utc_processed_on_utc")
                        .HasFilter("processed_on_utc IS NULL");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("OccurredOnUtc", "ProcessedOnUtc"), new[] { "Id", "Type", "Content" });

                    b.ToTable("outbox_messages", "stocks");
                });

            modelBuilder.Entity("Stockify.Common.Infrastructure.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("OutboxMessageId", "Name")
                        .HasName("pk_outbox_message_consumers");

                    b.ToTable("outbox_message_consumers", "stocks");
                });

            modelBuilder.Entity("Stockify.Modules.Stocks.Domain.Stockholders.Stockholder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.ComplexProperty<Dictionary<string, object>>("RiskProfile", "Stockify.Modules.Stocks.Domain.Stockholders.Stockholder.RiskProfile#RiskProfile", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("AttitudeType")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("attitude_type");

                            b1.Property<decimal>("Coefficient")
                                .HasPrecision(18, 4)
                                .HasColumnType("numeric(18,4)")
                                .HasColumnName("risk_coefficient");

                            b1.Property<DateTime?>("UpdatedAtUtc")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("risk_profile_updated_at_utc");
                        });

                    b.HasKey("Id")
                        .HasName("pk_stockholders");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_stockholders_email");

                    b.ToTable("stockholders", "stocks");
                });

            modelBuilder.Entity("Stockify.Modules.Stocks.Domain.Subscriptions.TickerSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid>("StockholderId")
                        .HasColumnType("uuid")
                        .HasColumnName("stockholder_id");

                    b.Property<Guid>("TickerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticker_id");

                    b.HasKey("Id")
                        .HasName("pk_ticker_subscriptions");

                    b.HasIndex("StockholderId")
                        .HasDatabaseName("ix_ticker_subscriptions_stockholder_id");

                    b.HasIndex("TickerId", "StockholderId")
                        .IsUnique()
                        .HasDatabaseName("ix_ticker_subscriptions_ticker_id_stockholder_id")
                        .HasFilter("active = true");

                    b.ToTable("ticker_subscriptions", "stocks");
                });

            modelBuilder.Entity("Stockify.Modules.Stocks.Domain.TickerTypes.TickerType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_ticker_types");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_ticker_types_code");

                    b.ToTable("ticker_types", "stocks");
                });

            modelBuilder.Entity("Stockify.Modules.Stocks.Domain.Tickers.Ticker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Cik")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cik");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("symbol");

                    b.Property<Guid>("TickerTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticker_type_id");

                    b.HasKey("Id")
                        .HasName("pk_tickers");

                    b.HasIndex("Cik")
                        .IsUnique()
                        .HasDatabaseName("ix_tickers_cik");

                    b.HasIndex("Symbol")
                        .IsUnique()
                        .HasDatabaseName("ix_tickers_symbol");

                    b.HasIndex("TickerTypeId")
                        .HasDatabaseName("ix_tickers_ticker_type_id");

                    b.HasIndex("Symbol", "Name", "Description")
                        .HasDatabaseName("ix_tickers_symbol_name_description")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Symbol", "Name", "Description"), "GIN");

                    b.ToTable("tickers", "stocks");
                });

            modelBuilder.Entity("Stockify.Modules.Stocks.Domain.Subscriptions.TickerSubscription", b =>
                {
                    b.HasOne("Stockify.Modules.Stocks.Domain.Stockholders.Stockholder", null)
                        .WithMany()
                        .HasForeignKey("StockholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticker_subscriptions_stockholders_stockholder_id");

                    b.HasOne("Stockify.Modules.Stocks.Domain.Tickers.Ticker", null)
                        .WithMany()
                        .HasForeignKey("TickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticker_subscriptions_tickers_ticker_id");
                });

            modelBuilder.Entity("Stockify.Modules.Stocks.Domain.Tickers.Ticker", b =>
                {
                    b.HasOne("Stockify.Modules.Stocks.Domain.TickerTypes.TickerType", null)
                        .WithMany()
                        .HasForeignKey("TickerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tickers_ticker_types_ticker_type_id");
                });
#pragma warning restore 612, 618
        }
    }
}
